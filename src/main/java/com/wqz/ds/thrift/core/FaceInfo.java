/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wqz.ds.thrift.core;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-06")
public class FaceInfo implements org.apache.thrift.TBase<FaceInfo, FaceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FaceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FaceInfo");

  private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quality", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField IS_ENTER_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_enter_action", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField HAVE_SEEN_FIELD_DESC = new org.apache.thrift.protocol.TField("have_seen", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("is_vip", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_ENTER_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_enter_store", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FaceInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FaceInfoTupleSchemeFactory();

  public int fid; // required
  public int quality; // required
  public int age; // required
  public int gender; // required
  public java.nio.ByteBuffer image; // required
  public long timestamp; // required
  public boolean is_enter_action; // required
  public boolean have_seen; // required
  public boolean is_vip; // required
  public boolean is_enter_store; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FID((short)1, "fid"),
    QUALITY((short)2, "quality"),
    AGE((short)3, "age"),
    GENDER((short)4, "gender"),
    IMAGE((short)5, "image"),
    TIMESTAMP((short)6, "timestamp"),
    IS_ENTER_ACTION((short)7, "is_enter_action"),
    HAVE_SEEN((short)8, "have_seen"),
    IS_VIP((short)9, "is_vip"),
    IS_ENTER_STORE((short)10, "is_enter_store");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FID
          return FID;
        case 2: // QUALITY
          return QUALITY;
        case 3: // AGE
          return AGE;
        case 4: // GENDER
          return GENDER;
        case 5: // IMAGE
          return IMAGE;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // IS_ENTER_ACTION
          return IS_ENTER_ACTION;
        case 8: // HAVE_SEEN
          return HAVE_SEEN;
        case 9: // IS_VIP
          return IS_VIP;
        case 10: // IS_ENTER_STORE
          return IS_ENTER_STORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FID_ISSET_ID = 0;
  private static final int __QUALITY_ISSET_ID = 1;
  private static final int __AGE_ISSET_ID = 2;
  private static final int __GENDER_ISSET_ID = 3;
  private static final int __TIMESTAMP_ISSET_ID = 4;
  private static final int __IS_ENTER_ACTION_ISSET_ID = 5;
  private static final int __HAVE_SEEN_ISSET_ID = 6;
  private static final int __IS_VIP_ISSET_ID = 7;
  private static final int __IS_ENTER_STORE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUALITY, new org.apache.thrift.meta_data.FieldMetaData("quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_ENTER_ACTION, new org.apache.thrift.meta_data.FieldMetaData("is_enter_action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAVE_SEEN, new org.apache.thrift.meta_data.FieldMetaData("have_seen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_VIP, new org.apache.thrift.meta_data.FieldMetaData("is_vip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENTER_STORE, new org.apache.thrift.meta_data.FieldMetaData("is_enter_store", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FaceInfo.class, metaDataMap);
  }

  public FaceInfo() {
  }

  public FaceInfo(
    int fid,
    int quality,
    int age,
    int gender,
    java.nio.ByteBuffer image,
    long timestamp,
    boolean is_enter_action,
    boolean have_seen,
    boolean is_vip,
    boolean is_enter_store)
  {
    this();
    this.fid = fid;
    setFidIsSet(true);
    this.quality = quality;
    setQualityIsSet(true);
    this.age = age;
    setAgeIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.is_enter_action = is_enter_action;
    setIs_enter_actionIsSet(true);
    this.have_seen = have_seen;
    setHave_seenIsSet(true);
    this.is_vip = is_vip;
    setIs_vipIsSet(true);
    this.is_enter_store = is_enter_store;
    setIs_enter_storeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FaceInfo(FaceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fid = other.fid;
    this.quality = other.quality;
    this.age = other.age;
    this.gender = other.gender;
    if (other.isSetImage()) {
      this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
    }
    this.timestamp = other.timestamp;
    this.is_enter_action = other.is_enter_action;
    this.have_seen = other.have_seen;
    this.is_vip = other.is_vip;
    this.is_enter_store = other.is_enter_store;
  }

  public FaceInfo deepCopy() {
    return new FaceInfo(this);
  }

  @Override
  public void clear() {
    setFidIsSet(false);
    this.fid = 0;
    setQualityIsSet(false);
    this.quality = 0;
    setAgeIsSet(false);
    this.age = 0;
    setGenderIsSet(false);
    this.gender = 0;
    this.image = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIs_enter_actionIsSet(false);
    this.is_enter_action = false;
    setHave_seenIsSet(false);
    this.have_seen = false;
    setIs_vipIsSet(false);
    this.is_vip = false;
    setIs_enter_storeIsSet(false);
    this.is_enter_store = false;
  }

  public int getFid() {
    return this.fid;
  }

  public FaceInfo setFid(int fid) {
    this.fid = fid;
    setFidIsSet(true);
    return this;
  }

  public void unsetFid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
  }

  /** Returns true if field fid is set (has been assigned a value) and false otherwise */
  public boolean isSetFid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
  }

  public void setFidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
  }

  public int getQuality() {
    return this.quality;
  }

  public FaceInfo setQuality(int quality) {
    this.quality = quality;
    setQualityIsSet(true);
    return this;
  }

  public void unsetQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  /** Returns true if field quality is set (has been assigned a value) and false otherwise */
  public boolean isSetQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  public void setQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUALITY_ISSET_ID, value);
  }

  public int getAge() {
    return this.age;
  }

  public FaceInfo setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public FaceInfo setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public byte[] getImage() {
    setImage(org.apache.thrift.TBaseHelper.rightSize(image));
    return image == null ? null : image.array();
  }

  public java.nio.ByteBuffer bufferForImage() {
    return org.apache.thrift.TBaseHelper.copyBinary(image);
  }

  public FaceInfo setImage(byte[] image) {
    this.image = image == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(image.clone());
    return this;
  }

  public FaceInfo setImage(java.nio.ByteBuffer image) {
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public FaceInfo setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public boolean isIs_enter_action() {
    return this.is_enter_action;
  }

  public FaceInfo setIs_enter_action(boolean is_enter_action) {
    this.is_enter_action = is_enter_action;
    setIs_enter_actionIsSet(true);
    return this;
  }

  public void unsetIs_enter_action() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ENTER_ACTION_ISSET_ID);
  }

  /** Returns true if field is_enter_action is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_enter_action() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ENTER_ACTION_ISSET_ID);
  }

  public void setIs_enter_actionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ENTER_ACTION_ISSET_ID, value);
  }

  public boolean isHave_seen() {
    return this.have_seen;
  }

  public FaceInfo setHave_seen(boolean have_seen) {
    this.have_seen = have_seen;
    setHave_seenIsSet(true);
    return this;
  }

  public void unsetHave_seen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAVE_SEEN_ISSET_ID);
  }

  /** Returns true if field have_seen is set (has been assigned a value) and false otherwise */
  public boolean isSetHave_seen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAVE_SEEN_ISSET_ID);
  }

  public void setHave_seenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAVE_SEEN_ISSET_ID, value);
  }

  public boolean isIs_vip() {
    return this.is_vip;
  }

  public FaceInfo setIs_vip(boolean is_vip) {
    this.is_vip = is_vip;
    setIs_vipIsSet(true);
    return this;
  }

  public void unsetIs_vip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_VIP_ISSET_ID);
  }

  /** Returns true if field is_vip is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_vip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_VIP_ISSET_ID);
  }

  public void setIs_vipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_VIP_ISSET_ID, value);
  }

  public boolean isIs_enter_store() {
    return this.is_enter_store;
  }

  public FaceInfo setIs_enter_store(boolean is_enter_store) {
    this.is_enter_store = is_enter_store;
    setIs_enter_storeIsSet(true);
    return this;
  }

  public void unsetIs_enter_store() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ENTER_STORE_ISSET_ID);
  }

  /** Returns true if field is_enter_store is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_enter_store() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ENTER_STORE_ISSET_ID);
  }

  public void setIs_enter_storeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ENTER_STORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FID:
      if (value == null) {
        unsetFid();
      } else {
        setFid((java.lang.Integer)value);
      }
      break;

    case QUALITY:
      if (value == null) {
        unsetQuality();
      } else {
        setQuality((java.lang.Integer)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((java.lang.Integer)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((java.lang.Integer)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        if (value instanceof byte[]) {
          setImage((byte[])value);
        } else {
          setImage((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case IS_ENTER_ACTION:
      if (value == null) {
        unsetIs_enter_action();
      } else {
        setIs_enter_action((java.lang.Boolean)value);
      }
      break;

    case HAVE_SEEN:
      if (value == null) {
        unsetHave_seen();
      } else {
        setHave_seen((java.lang.Boolean)value);
      }
      break;

    case IS_VIP:
      if (value == null) {
        unsetIs_vip();
      } else {
        setIs_vip((java.lang.Boolean)value);
      }
      break;

    case IS_ENTER_STORE:
      if (value == null) {
        unsetIs_enter_store();
      } else {
        setIs_enter_store((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FID:
      return getFid();

    case QUALITY:
      return getQuality();

    case AGE:
      return getAge();

    case GENDER:
      return getGender();

    case IMAGE:
      return getImage();

    case TIMESTAMP:
      return getTimestamp();

    case IS_ENTER_ACTION:
      return isIs_enter_action();

    case HAVE_SEEN:
      return isHave_seen();

    case IS_VIP:
      return isIs_vip();

    case IS_ENTER_STORE:
      return isIs_enter_store();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FID:
      return isSetFid();
    case QUALITY:
      return isSetQuality();
    case AGE:
      return isSetAge();
    case GENDER:
      return isSetGender();
    case IMAGE:
      return isSetImage();
    case TIMESTAMP:
      return isSetTimestamp();
    case IS_ENTER_ACTION:
      return isSetIs_enter_action();
    case HAVE_SEEN:
      return isSetHave_seen();
    case IS_VIP:
      return isSetIs_vip();
    case IS_ENTER_STORE:
      return isSetIs_enter_store();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FaceInfo)
      return this.equals((FaceInfo)that);
    return false;
  }

  public boolean equals(FaceInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fid = true;
    boolean that_present_fid = true;
    if (this_present_fid || that_present_fid) {
      if (!(this_present_fid && that_present_fid))
        return false;
      if (this.fid != that.fid)
        return false;
    }

    boolean this_present_quality = true;
    boolean that_present_quality = true;
    if (this_present_quality || that_present_quality) {
      if (!(this_present_quality && that_present_quality))
        return false;
      if (this.quality != that.quality)
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_is_enter_action = true;
    boolean that_present_is_enter_action = true;
    if (this_present_is_enter_action || that_present_is_enter_action) {
      if (!(this_present_is_enter_action && that_present_is_enter_action))
        return false;
      if (this.is_enter_action != that.is_enter_action)
        return false;
    }

    boolean this_present_have_seen = true;
    boolean that_present_have_seen = true;
    if (this_present_have_seen || that_present_have_seen) {
      if (!(this_present_have_seen && that_present_have_seen))
        return false;
      if (this.have_seen != that.have_seen)
        return false;
    }

    boolean this_present_is_vip = true;
    boolean that_present_is_vip = true;
    if (this_present_is_vip || that_present_is_vip) {
      if (!(this_present_is_vip && that_present_is_vip))
        return false;
      if (this.is_vip != that.is_vip)
        return false;
    }

    boolean this_present_is_enter_store = true;
    boolean that_present_is_enter_store = true;
    if (this_present_is_enter_store || that_present_is_enter_store) {
      if (!(this_present_is_enter_store && that_present_is_enter_store))
        return false;
      if (this.is_enter_store != that.is_enter_store)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + fid;

    hashCode = hashCode * 8191 + quality;

    hashCode = hashCode * 8191 + age;

    hashCode = hashCode * 8191 + gender;

    hashCode = hashCode * 8191 + ((isSetImage()) ? 131071 : 524287);
    if (isSetImage())
      hashCode = hashCode * 8191 + image.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((is_enter_action) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((have_seen) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_vip) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_enter_store) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(FaceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuality()).compareTo(other.isSetQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quality, other.quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_enter_action()).compareTo(other.isSetIs_enter_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_enter_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_enter_action, other.is_enter_action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHave_seen()).compareTo(other.isSetHave_seen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHave_seen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.have_seen, other.have_seen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_vip()).compareTo(other.isSetIs_vip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_vip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_vip, other.is_vip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_enter_store()).compareTo(other.isSetIs_enter_store());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_enter_store()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_enter_store, other.is_enter_store);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FaceInfo(");
    boolean first = true;

    sb.append("fid:");
    sb.append(this.fid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quality:");
    sb.append(this.quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.image, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_enter_action:");
    sb.append(this.is_enter_action);
    first = false;
    if (!first) sb.append(", ");
    sb.append("have_seen:");
    sb.append(this.have_seen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_vip:");
    sb.append(this.is_vip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_enter_store:");
    sb.append(this.is_enter_store);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FaceInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceInfoStandardScheme getScheme() {
      return new FaceInfoStandardScheme();
    }
  }

  private static class FaceInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<FaceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FaceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fid = iprot.readI32();
              struct.setFidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quality = iprot.readI32();
              struct.setQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readBinary();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_ENTER_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_enter_action = iprot.readBool();
              struct.setIs_enter_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HAVE_SEEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.have_seen = iprot.readBool();
              struct.setHave_seenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_VIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_vip = iprot.readBool();
              struct.setIs_vipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_ENTER_STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_enter_store = iprot.readBool();
              struct.setIs_enter_storeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FaceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FID_FIELD_DESC);
      oprot.writeI32(struct.fid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUALITY_FIELD_DESC);
      oprot.writeI32(struct.quality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeBinary(struct.image);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENTER_ACTION_FIELD_DESC);
      oprot.writeBool(struct.is_enter_action);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAVE_SEEN_FIELD_DESC);
      oprot.writeBool(struct.have_seen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_VIP_FIELD_DESC);
      oprot.writeBool(struct.is_vip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENTER_STORE_FIELD_DESC);
      oprot.writeBool(struct.is_enter_store);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FaceInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceInfoTupleScheme getScheme() {
      return new FaceInfoTupleScheme();
    }
  }

  private static class FaceInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<FaceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FaceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFid()) {
        optionals.set(0);
      }
      if (struct.isSetQuality()) {
        optionals.set(1);
      }
      if (struct.isSetAge()) {
        optionals.set(2);
      }
      if (struct.isSetGender()) {
        optionals.set(3);
      }
      if (struct.isSetImage()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetIs_enter_action()) {
        optionals.set(6);
      }
      if (struct.isSetHave_seen()) {
        optionals.set(7);
      }
      if (struct.isSetIs_vip()) {
        optionals.set(8);
      }
      if (struct.isSetIs_enter_store()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetFid()) {
        oprot.writeI32(struct.fid);
      }
      if (struct.isSetQuality()) {
        oprot.writeI32(struct.quality);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetImage()) {
        oprot.writeBinary(struct.image);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetIs_enter_action()) {
        oprot.writeBool(struct.is_enter_action);
      }
      if (struct.isSetHave_seen()) {
        oprot.writeBool(struct.have_seen);
      }
      if (struct.isSetIs_vip()) {
        oprot.writeBool(struct.is_vip);
      }
      if (struct.isSetIs_enter_store()) {
        oprot.writeBool(struct.is_enter_store);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FaceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.fid = iprot.readI32();
        struct.setFidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.quality = iprot.readI32();
        struct.setQualityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.image = iprot.readBinary();
        struct.setImageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_enter_action = iprot.readBool();
        struct.setIs_enter_actionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.have_seen = iprot.readBool();
        struct.setHave_seenIsSet(true);
      }
      if (incoming.get(8)) {
        struct.is_vip = iprot.readBool();
        struct.setIs_vipIsSet(true);
      }
      if (incoming.get(9)) {
        struct.is_enter_store = iprot.readBool();
        struct.setIs_enter_storeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

